REACT ESSENTIALS

-----------
Components
-----------
Reusable building block of any react appliation, A component in React is simply a function that returns renderable content - typically JSX code. After being defined, a custom component can be used like a built-in HTML element inside of other components' JSX code, any website or app can be broken down into smaller building blocks known as components.

featues of using components :
- by using components we break the developemnt into reusable building blocks(create small building blocks and compose the ui from them)
- related code lives together (html , js , css for a component is at one place only need to change their when update is required...)
- different components handle different usecase ... helps in developing large complex apps using this way 

Component function must follow two rules :
 -> the function name must start with an Upparcase charachter ...multi word name should be writen in pascal case ex. MyHeader
 -> the function must return a value that can be rendered(means displayed on screen) by react ... in most cases return jsx 
    also allowed => string , boolean , number , null, array of allowed values .

-------------
What is JSX?
-------------
JSX stands for JavaScript XML. It’s a syntax extension for JavaScript that allows you to write HTML-like code inside your JavaScript files.

purpose of jsx => it helps us to define target html code inside of your components ...

ex .. 
const element = <h1>Hello, world!</h1> 
  gets compiled to  || 
const element = React.createElement('h1', null, 'Hello, world!');

The idea behind JSX is that you have an easier time defining the target HTML code that should be generated by your components. JSX allows you to define the target UI / HTML code right inside your JavaScript code - and therefore right inside your components.

advantage of using jsx ->  more  CONVIENTNT , more readible , and improves performance 

🔥JSX Improves Performance Because:

Without JSX	                                                                      With JSX
Manual, error-prone createElement	                                               Automatically generates optimized createElement
Possible bad Virtual DOM trees	                                               Always clean, consistent Virtual DOM trees
Slower React diffing	                                                           Faster React diffing
Extra real DOM updates	                                                           Only minimal real DOM updates

Q What does React do with the components you use in the JSX code?

ans : Your JSX code leads to a tree-like code structure that "tells" React how the different components are related and how the UI should look like. It then executes appropriate commands to manipulate the real DOM to reflect that target structure / code.

BuiltIn components vs Custom components:

Built in components are rendered as dom nodes by react ... whereas custom components are just wrappers we create for better code structuring .. react traverese the component tree untill it has only built in components left ...

By "importing" the image, a production-safe path gets generated under the hood.

way 1(poor)
<img src ='src/assests/teja-mai-hoon.png >
issue with this way =>  (will break in production) and not optimsed way also

way 2(amazing work chitta )
better way to load images ....
import tejaImg from ./assests/teja-mai-hoon.png; 
<img src ={tejaImg} 

Props (just like arguments to function ) => props are custom html attributes set on a component (custom component)


ex. <User-info 
      name="miller"
      age={69}
      details={{userName: 'millerop'}}
      hobbies={['cooking', 'reading']}
    />

children Prop : "children" will receive whichever content you pass between the opening and closing tags of your component.


Q) How can you "configure" the execution of an event-dependent function (e.g., define which arguments get passed to it)?

ans: By wrapping the execution of your event handling function with another function, it's that other function that's passed as a value to the   event-handling prop. Therefore, your main function (=> handleClick in this example) does NOT get executed too early but instead only when the event occurs.

## By deafult react components execute only once ... if we want react to execute a component again we have to tell react (chatta please execute my component again)

 The component to which the state belongs and its child and descendent components will be re-evaluated as state changes.

 VVI -> we can output an array of data in Jsx ... it can be anything from ex .(['hello','world'] -> helloworld ) .... but it can also be an aray of jsx elements.. so jsx is capable of dealing with arrays of renderable data ...

 ex.['<p>hello</p>','<p>world</p>'] -> hello 
                                       world 
 ... (kafi useful hai )


 ex. {[<p>atul</p>,<li>boy</li>,<li>22</li>,<li>cse</li>]} -> render aise hoga ki jsx isko execute krega array ke elements ko order me

       atul
      . boy
      . 22
      . cse


usecase => manlo 10 components has jo dynamic value le rhe to instead of writing it one by one my array me convert kr skte hain using map function .. and woo array khud jsx resolve kr dega ... (for more video 58 react maximilain course )



# YOU DONT COMPULSORALY NEED JSX .. WE CAN BUILD REACT PROJECTS WITHOUT USING JSX ALSO .. JUST WITH JSX IT IS MORE CONVIENTNT .

ex.
  without jsx code                                         with jsx code
  <div id='content>                                       React.createElement('div',{id:'content}, 
    <p>helloworld</p>                                      React.createElement('p',null,'helloworld')
  </div>                                                  )



EX. ReactDOM.createRoot(entryPoint).render(<App />) OR ReactDOM.createRoot(entryPoint).render(React.createElement(App));

fragment : extra component faltu me lgane se bacha deta hai ...(use <fragment></fragement> .. in new react projects just use <> </>)

{key concepts : forwarded props , multiple componet slots ,element identifier as props , default prop values}

forwarded props -> kuch nhi hai bs construct and deconstruct params ka use krke ...
multiple componet slots -> props ko jsx code bhej skte hain (taki wrapper compoent multiple use case handle kr as ye iske jsx-valued props slots ki tarah work krenge jiska data slot hoga parent se .... )

element identifier as props -> use case wrapper component ...

react hooks are functions only speciality is they can be called only from react components or custom hooks ... 

VVI-> when updating state based on previous value of state , react team strongly says we should not directly pass the new state value(expreesion which generates new state value from old .. ex. setIsSelected(!isSelected) ❌ ❌ ❌ .. instead pass a function to the state updation function (reason -> state execution fn doesnt get exected instantly it gets scheduled ... which can cause bugs ...

right way => setIsSelected((anyName) => !anyName) [ react guarentes to provide latest value this way ]

Update Object state Immutably => Objects and arrays(type of object only) are reference value in JavaScript so we should not mutate them directly insteam should create a deep copy first make change in the copy ...

State lifting up => lets say i have two un realted components A and B and both need a access to same information(ex. activePlayer , currHealth) then what we can do is go to the closest ancestor of both A & B and have the required information as state in the parent and pass to both a and b ... in this way same information is managed by seprate component....


Styling in react 
-----------------

-> using vanilla css we can style react components ... 
   Advantage : - Css code is decoupled from jsx code 
                 (matlab jsx ka code aur css ka code ek jagah nhi hai )
               
   Disadvantage : - You need to know css ( what a logic 🙀🙀🙀 )
                  - Css code is not scoped to components... 
                    css rules may clash accross components
                    (ex. same css class name used in different component 
                    for different purpose...)

-> Inline styling in react => through Inline styling we can achieve scoped style 
                             behaviour...
    Advantage : Style only effect the element to which we add them
                Dynamic (condintional) styling is simpile
                (ex .. <p style={{"background-color":isValid ? 'red':'yellow'}}>)

    DisAdvantage : No sepration between css and jsx code ...(css jsx code is coupled)
                   if styling using inline styles then the css reducancy becomes large as we 
                   need to style for every element individually
    ex .. <p style={
              {
              color:'red',
              'text-align':"left"
              }
            }

            ==> these styles will be only applied to the this para tag ....

Here comes CSS MODULES in picture ....

CSS Modules = Vanila css with file-specific scoping , css module is an approcah solution that needs to be implemented/inforced by the build process that is used in your react project... it is not a default browser or JavaScript feature ...

Working of css module => ye hmare css files me jo classNames hain unko unique class names me convert kr deta hai so no chance of collision .... works as scoping hogya ho ...

Important => CSS Modules are scoped only for class selectors... matlab iss way se sirf classes ke through hin scoped styling achieve hogi (not for ids tags..). 

![Alt text](Screenshot 2025-05-16 at 5.04.31 PM.png)